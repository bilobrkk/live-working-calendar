{"version":3,"sources":["helpers/calendarHelper.tsx","helpers/scheduleHelper.tsx","components/Calendar/Components/WeekDaysByDate.tsx","components/Calendar/Components/WeekDaysByName.tsx","components/Popup.tsx","components/Calendar/Components/ManageCells.tsx","components/Calendar/Components/SelectUser.tsx","components/Calendar/Components/ListOfAppointmentsByUser.tsx","components/Calendar/Components/ChangeWeek.tsx","components/Calendar/Components/ListOfAppointmentsAll.tsx","components/Calendar/calendar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getWeekDates","date","id","startFromMonday","getMonday","weekDates","Array","i","day","getDate","month","getMonth","year","getFullYear","saveDate","Date","fill","weekDays","weekID","d","getDay","diff","setDate","getChosenTimeByID","chooseTime","find","time","getChosenDayByID","weekdays","dayID","users","userID","userName","appointments","sortedAppointments","filter","app","appDate","appointment","getTime","slice","sort","a","b","_a","checkAvailability","today","dDate","closeDaysBeforeTommorow","className","availabilityDescription","isAvailable","_date","checkWorkingHoursForDay","checkSunday","checkSaturdays","checkBreak","length","checkIfItsReserved","timeId","aDate","aTimeId","dTimeId","WeekDaysByDate","props","weekStartWith","style","makePointer","map","index","key","WeekDaysByName","rowSpan","push","Popup","this","chosenTime","createAppointment","cancel","date_date","onClick","React","ManageCells","handleAppointments","idCell","availability","data-date-cell","data-time-row","SelectUser","selectChange","htmlFor","onChange","value","user","ListOfAppointmentsByUser","state","showAppointments","toggleAppointmentsHandler","bind","setState","filteredAppByUserID","filteredAppointment","appointmentDate","appointmentTime","ChangeWeek","changeWeek","data-symbol","data-state-date","ListOfAppointmentsAll","Calendar","selectedTimeID","selectedDate","selectedTime","showPopup","togglePopup","event","response","dataSymbol","todayDay","todayMonth","todayYear","newStartDate","setHours","beforeToday","afterTwoMonths","handleChangeWeek","target","getAttribute","alert","evenet","appointmentForWeek","appointmentForDay","console","log","makeAppointment","Component","cursor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a22f0bfb.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport IWeekDays from \"../interfaces/IWeekDays\";\r\n\r\n\r\n\r\nexport function handleChangeWeek(dataSymbol:string, weekStartWith:Date, weekID:number)\r\n    :{beforeToday: boolean, afterTwoMonths:boolean, newStartDate:Date, weekID: number} {\r\n    let todayDay = weekStartWith.getDate();\r\n    let todayMonth = weekStartWith.getMonth();\r\n    let todayYear = weekStartWith.getFullYear();\r\n\r\n\r\n    if (dataSymbol === \"minus\") {\r\n        let newDay = todayDay - 7;\r\n        let newStartDate = new Date(todayYear, todayMonth, newDay);\r\n\r\n        let today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n        let mondayFromToday = getMonday(today);\r\n        if (mondayFromToday.getTime() > newStartDate.getTime()) {\r\n            return {beforeToday: true, afterTwoMonths:false, newStartDate:newStartDate, weekID: weekID};\r\n            // alert(\"You cannot go in week before that we are today!\")\r\n        } else {\r\n            weekID = weekID - 1;\r\n            return {beforeToday: false, afterTwoMonths:false, newStartDate:newStartDate, weekID: weekID}\r\n            //\r\n            // this.setState(() => {\r\n            //     return {weekStartWith: newStartDate, weekID: weekID}\r\n            // });\r\n        }\r\n\r\n    } else if (dataSymbol === \"plus\") {\r\n        let newDay = todayDay + 7;\r\n        let newStartDate = new Date(todayYear, todayMonth, newDay);\r\n\r\n        let today = new Date();\r\n        let month = today.getMonth() + 2;\r\n        let maxDate = new Date(today.getFullYear(), month, today.getDate());\r\n        let mondayFromMaxDate = getMonday(maxDate);\r\n\r\n        if (mondayFromMaxDate.getTime() < newStartDate.getTime()) {\r\n            // return (\r\n            return {beforeToday: false, afterTwoMonths:true, newStartDate:newStartDate, weekID: weekID};\r\n            // alert(\"You cannot go more than two months from today!\")\r\n            // )\r\n        } else {\r\n            weekID = weekID + 1;\r\n            return {beforeToday: false, afterTwoMonths:false, newStartDate:newStartDate, weekID: weekID};\r\n\r\n            // this.setState(() => {\r\n            //     return {weekStartWith: newStartDate, weekID: weekID}\r\n            // });\r\n        }\r\n    }\r\n    return {beforeToday: false, afterTwoMonths:true, newStartDate:new Date(), weekID: weekID};\r\n\r\n}\r\n\r\n\r\nexport function getWeekDates(date: Date, id:number): IWeekDays {\r\n    let startFromMonday = getMonday(date);\r\n    let weekDates = new Array(7);\r\n\r\n\r\n    for (let i = 0; i <= 7; i++) {\r\n        let day = startFromMonday.getDate() + i;\r\n        let month = startFromMonday.getMonth();\r\n        let year = startFromMonday.getFullYear();\r\n\r\n        let saveDate = new Date(year, month, day);\r\n\r\n        weekDates.fill(saveDate, i)\r\n    }\r\n\r\n    return {weekDays: weekDates, weekID: id };\r\n}\r\n\r\n\r\nexport function getMonday(d: Date): Date {\r\n    let day = d.getDay(),\r\n        diff = d.getDate() - day + (day === 0 ? -6 : 1);\r\n    return new Date(d.setDate(diff));\r\n}\r\n\r\n\r\nexport function getChosenTimeByID(id: number) {\r\n    let time = chooseTime.find(function (time, i) {\r\n        if (i == id) {\r\n            return time;\r\n        }\r\n    });\r\n    return time;\r\n}\r\n\r\n\r\nexport function getChosenDayByID(id: number) {\r\n    let dayInWeek = weekdays.find(function (time, i) {\r\n        if (time.dayID == id) {\r\n            return time;\r\n        }\r\n    });\r\n    return dayInWeek;\r\n}\r\n\r\n\r\nexport function getUserByID(id: number) {\r\n    let user = users.find(function (user, i) {\r\n        if (user.userID == id) {\r\n            return user;\r\n        }\r\n    });\r\n    return user;\r\n}\r\n\r\n\r\nexport const weekdays: Array<any> = [\r\n    {day: \"Monday\", dayID: 1},\r\n    {day: \"Tuesday\", dayID: 2},\r\n    {day: \"Wednesday\", dayID: 3},\r\n    {day: \"Thursday\", dayID: 4},\r\n    {day: \"Friday\", dayID: 5},\r\n    {day: \"Saturday\", dayID: 6},\r\n    {day: \"Sunday\", dayID: 0}\r\n];\r\n\r\nexport const users: Array<any> = [\r\n    {userID: 0, userName: \"User 0\"},\r\n    {userID: 1, userName: \"User 1\"},\r\n    {userID: 2, userName: \"User 2\"},\r\n    {userID: 3, userName: \"User 3\"},\r\n    {userID: 4, userName: \"User 4\"}\r\n];\r\n\r\n\r\nexport const chooseTime: Array<any> = [\r\n    {time: \"08:00 - 08:30\", id: 0},\r\n    {time: \"08:30 - 09:00\", id: 1},\r\n    {time: \"09:00 - 09:30\", id: 2},\r\n    {time: \"09:30 - 10:00\", id: 3},\r\n    {time: \"10:00 - 10:30\", id: 4},\r\n    {time: \"10:30 - 11:00\", id: 5},\r\n    {time: \"11:00 - 11:30\", id: 6},\r\n    {time: \"11:30 - 12:00\", id: 7},\r\n    {time: \"12:00 - 12:30\", id: 8},\r\n    {time: \"12:30 - 13:00\", id: 9},\r\n    {time: \"13:00 - 13:30\", id: 10},\r\n    {time: \"13:30 - 14:00\", id: 11},\r\n    {time: \"14:00 - 14:30\", id: 12},\r\n    {time: \"14:30 - 15:00\", id: 13},\r\n    {time: \"15:00 - 15:30\", id: 14},\r\n    {time: \"15:30 - 16:00\", id: 15},\r\n    {time: \"16:00 - 16:30\", id: 16},\r\n    {time: \"16:30 - 17:00\", id: 17},\r\n    {time: \"17:00 - 17:30\", id: 18},\r\n    {time: \"17:30 - 18:00\", id: 19},\r\n    {time: \"18:00 - 18:30\", id: 20},\r\n    {time: \"18:30 - 19:00\", id: 21}\r\n];\r\nexport const lastIdMorning:number = 11;\r\nexport const firstIdAfternoon:number = 10;\r\nexport const breakIdMorning:number = 6;\r\nexport const breakIdAfternoon:number = 16;\r\n\r\nexport const sundayID:number = 0;\r\nexport const saturdayID:number = 6;\r\n","import IAppointment from \"../interfaces/IAppointment\";\r\nimport IAvailability from \"../interfaces/IAvailability\";\r\nimport {\r\n    breakIdAfternoon,\r\n    breakIdMorning,\r\n    firstIdAfternoon,\r\n    getChosenDayByID,\r\n    lastIdMorning, saturdayID, sundayID\r\n} from \"./calendarHelper\";\r\n\r\nexport const appointments: Array<IAppointment> = [];\r\n\r\nexport function makeAppointment(date: string, time: any, weekID: number, userID: number) {\r\n\r\n    let _date = new Date(date);\r\n    _date.setHours(0, 0, 0, 0);\r\n\r\n    let appointmentForWeek = 0;\r\n    let appointmentForDay = 0;\r\n\r\n    appointments.filter((appointment: IAppointment) => {\r\n        if ((appointment.appointment.date).getTime() === _date.getTime() && appointment.userID === userID) {\r\n            appointmentForDay++;\r\n        } else if (appointment.weekID == weekID && appointment.userID === userID) {\r\n            appointmentForWeek++;\r\n        }\r\n    });\r\n\r\n    console.log(appointmentForDay, appointmentForWeek)\r\n\r\n    if(appointmentForDay >= 1){\r\n        alert(\"YOU CAN'T CREATE APPOINTMENT FOR THIS DAY ANYMORE\");\r\n    } else if (appointmentForWeek < 2) {\r\n        appointments.push({\r\n            userID: userID,\r\n            weekID: weekID,\r\n            appointment: {\r\n                id: appointments.length,\r\n                timeId: time.id,\r\n                date: new Date(date),\r\n            }\r\n        });\r\n    } else {\r\n        alert(\"YOU CAN'T CREATE APPOINTMENT FOR THIS WEEK ANYMORE\");\r\n    }\r\n}\r\n\r\n\r\nexport function sortedAppointments():Array<IAppointment> {\r\n    let removedOldAppointments =  appointments.filter(app => {\r\n            let appDate = app.appointment.date.getTime();\r\n            let today = new Date().getTime();\r\n            if(!(appDate<today)){\r\n                return appDate;\r\n            }\r\n    });\r\n\r\n    let appointmentByDate = removedOldAppointments.slice().sort((a: IAppointment, b: IAppointment) => {\r\n        let _a = new Date(a.appointment.date).getTime();\r\n        let _b = new Date(b.appointment.date).getTime();\r\n        return _b - _a;\r\n    });\r\n    let appointmentByUser = appointmentByDate.slice().sort((a: IAppointment, b: IAppointment) => b.userID - a.userID);\r\n    let appointmentByWeekID = appointmentByUser.sort((a: IAppointment, b: IAppointment) => a.weekID > b.weekID ? 1 : -1);\r\n\r\n    return appointmentByWeekID;\r\n}\r\n\r\n\r\nexport function checkAvailability(date: string, time: any): IAvailability {\r\n    let today = new Date().getTime();\r\n    let dDate = new Date(date).getTime();\r\n\r\n    if (closeDaysBeforeTommorow(dDate, today)) {\r\n        return {\r\n            className: \"days-before\",\r\n            availabilityDescription: \"\",\r\n            isAvailable: false\r\n        };\r\n    } else if (checkWorkingHoursForDay(date, time)) {\r\n        return {\r\n            className: \"nonworking-hours\",\r\n            availabilityDescription: \"\",\r\n            isAvailable: \"nonworkingHours\"\r\n        };\r\n    } else if (checkSunday(date)) {\r\n        return {\r\n            className: \"nonworking-hours\",\r\n            availabilityDescription: \"\",\r\n            isAvailable: \"nonworkingHours\"\r\n        };\r\n    } else if (checkSaturdays(date)) {\r\n        return {\r\n            className: \"nonworking-hours\",\r\n            availabilityDescription: \"\",\r\n            isAvailable: \"nonworkingHours\"\r\n        };\r\n    } else if (checkBreak(time)) {\r\n        return {\r\n            className: \"break\",\r\n            availabilityDescription: \"BREAK\",\r\n            isAvailable: \"break\"\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < appointments.length; i++) {\r\n        let aDate = appointments[i].appointment.date.getTime();\r\n        if (checkIfItsReserved(aDate, dDate, appointments[i].appointment.timeId, time.id)) {\r\n            return {\r\n                className: \"reserved\",\r\n                availabilityDescription: \"RESERVED\",\r\n                isAvailable: \"reserved\"\r\n            };\r\n        }\r\n    }\r\n\r\n    return {\r\n        className: \"free\",\r\n        availabilityDescription: \"FREE\",\r\n        isAvailable: true\r\n    };\r\n}\r\n\r\n\r\nfunction closeDaysBeforeTommorow(dDate: number, today: number): boolean {\r\n    return dDate <= today;\r\n}\r\n\r\nfunction checkIfItsReserved(aDate: number, dDate: number, aTimeId: number, dTimeId: number): boolean {\r\n    return aDate === dDate && aTimeId === dTimeId;\r\n}\r\n\r\nfunction checkWorkingHoursForDay(date: string, time: any): boolean {\r\n    let _date = new Date(date);\r\n    if (!(_date.getDate() % 2 === 0 && time.id > lastIdMorning)) {\r\n        return !(_date.getDate() % 2 === 0) && time.id < firstIdAfternoon;\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction checkBreak(time: any): boolean {\r\n    return time.id === breakIdMorning || time.id === breakIdAfternoon;\r\n}\r\n\r\nfunction checkSaturdays(date: string): boolean {\r\n    let _date = new Date(date);\r\n    return getChosenDayByID(_date.getDay()).dayID === saturdayID && !(_date.getDate() % 2 === 0);\r\n}\r\n\r\nfunction checkSunday(date: string): boolean {\r\n    let _date = new Date(date);\r\n    return getChosenDayByID(_date.getDay()).dayID === sundayID;\r\n}\r\n\r\n\r\nappointments.push(\r\n    {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 0,\r\n            timeId: 11,\r\n            date: new Date(\"Fri Jul 17 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 1,\r\n            timeId: 2,\r\n            date: new Date(\"Sun Jul 18 2020 00:00:00\"),\r\n        }\r\n\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 2,\r\n            timeId: 12,\r\n            date: new Date(\"Sat Jul 20 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 3,\r\n            timeId: 4,\r\n            date: new Date(\"Sat Jul 20 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 4,\r\n            timeId: 11,\r\n            date: new Date(\"Sat Jul 21 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 5,\r\n            timeId: 15,\r\n            date: new Date(\"Sat Jul 21 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 6,\r\n            timeId: 5,\r\n            date: new Date(\"Sat Jul 22 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 7,\r\n            timeId: 17,\r\n            date: new Date(\"Sat Jul 23 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 8,\r\n            timeId: 1,\r\n            date: new Date(\"Sat Jul 24 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 9,\r\n            timeId: 20,\r\n            date: new Date(\"Sat Jul 27 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 10,\r\n            timeId: 5,\r\n            date: new Date(\"Sat Jul 28 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 11,\r\n            timeId: 19,\r\n            date: new Date(\"Sat Jul 29 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 12,\r\n            timeId: 17,\r\n            date: new Date(\"Sat Jul 29 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 13,\r\n            timeId: 8,\r\n            date: new Date(\"Sat Jul 30 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 14,\r\n            timeId: 7,\r\n            date: new Date(\"Sat Jul 30 2020 00:00:00\"),\r\n        }\r\n    }, {\r\n        userID: 0,\r\n        weekID: 0,\r\n        appointment: {\r\n            id: 15,\r\n            timeId: 21,\r\n            date: new Date(\"Sat Jul 31 2020 00:00:00\"),\r\n        }\r\n    }\r\n);\r\n","import {getWeekDates} from \"../../../helpers/calendarHelper\";\r\nimport * as React from \"react\";\r\nimport {makePointer} from \"../calendar\";\r\n\r\nexport default function WeekDaysByDate(props:any) {\r\n    const {weekStartWith, weekID} = props;\r\n\r\n    return (\r\n        <tr style={makePointer(false)}>\r\n            {\r\n                getWeekDates(weekStartWith, weekID).weekDays.map((date: string, index: number) => {\r\n                    let day = new Date(date);\r\n                    return (\r\n                        <th className=\"dates-style\" key={index}>\r\n                            {day.getDate()}.{day.getMonth() + 1}.\r\n                        </th>\r\n                    )\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n","import {getWeekDates, weekdays} from \"../../../helpers/calendarHelper\";\r\nimport * as React from \"react\";\r\nimport {makePointer} from \"../calendar\";\r\n\r\nexport function WeekDaysByName() {\r\n    return (\r\n        <tr style={makePointer(false)}>\r\n            <th rowSpan={2} className=\"dates-hours-cell\"> HOURS / DATES </th>\r\n            {\r\n                weekdays.map((day: {day: string, dayID: number}, index: number) => {\r\n                    return (\r\n                        <th className=\"days-style\" key={index}>{day.day}</th>\r\n                    )\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}","import * as React from \"react\";\r\nimport './popup.scss';\r\n\r\nclass Popup extends React.Component<any, any> {\r\n    render() {\r\n        const {date, chosenTime, createAppointment, cancel} = this.props;\r\n        let _date = new Date(date);\r\n        let date_date = _date.getDate() + \".\" + (_date.getMonth() + 1) + \".\" + _date.getFullYear() + \"  \" + chosenTime.time;\r\n        return (\r\n            <div className='popup'>\r\n                <div className='popup_inner popup_display'>\r\n                    <h1 className='popup_h1'> CREATE YOUR APPOINTMENT FOR </h1>\r\n                    <h2 className='popup_h2'>{date_date}</h2>\r\n                    <div className='popup_buttons'>\r\n                        <button className='popup_create_buttons' onClick={createAppointment}>CREATE</button>\r\n                        <button className='popup_cancel_buttons' onClick={cancel}>CANCEL</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Popup;","import * as React from \"react\";\r\nimport { getWeekDates} from \"../../../helpers/calendarHelper\";\r\nimport {makePointer} from \"../calendar\";\r\nimport {checkAvailability} from \"../../../helpers/scheduleHelper\";\r\nimport IAvailability from \"../../../interfaces/IAvailability\";\r\n\r\nclass ManageCells extends React.Component<any, any> {\r\n\r\n    render() {\r\n        const {chooseTime, weekStartWith, weekID, handleAppointments} = this.props;\r\n\r\n        return (\r\n            chooseTime.map((time: {time: string, id: number}) => {\r\n                return (\r\n                    <tr key={time.id}>\r\n                        <td className=\"time-style\" style={makePointer(false)}>{time.time}</td>\r\n                        {\r\n                            getWeekDates(weekStartWith, weekID).weekDays.map((date: string, idCell: number) => {\r\n                                    let availability: IAvailability = checkAvailability(date, time);\r\n                                    return (\r\n                                        <td data-date-cell={date} data-time-row={time.id} key={idCell}\r\n                                            onClick={availability.isAvailable === true ? handleAppointments:null}\r\n                                            className={availability.className + \" pointer text-align\"}\r\n                                            style={makePointer(availability.isAvailable)}>\r\n                                            {availability.availabilityDescription}\r\n                                        </td>\r\n                                    )\r\n                                }\r\n                            )\r\n                        }\r\n                    </tr>\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ManageCells;","import * as React from \"react\";\r\nimport {users} from \"../../../helpers/calendarHelper\";\r\n\r\nclass SelectUser extends React.Component<any, any> {\r\n    render() {\r\n        const {selectChange, userID} = this.props;\r\n        return (\r\n            <form className=\"form-select-user\">\r\n                <label htmlFor=\"user\">Select user:</label>\r\n                <select id=\"user\" className=\"info-select\" onChange={selectChange} value={userID}>\r\n                    {\r\n                        users.map((user, index: number) =>\r\n                            <option key={index}\r\n                                    value={user.userID}>{user.userName}</option>)\r\n                    }\r\n                </select>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SelectUser;","import * as React from \"react\";\r\nimport {getChosenTimeByID} from \"../../../helpers/calendarHelper\";\r\nimport IAppointment from \"../../../interfaces/IAppointment\";\r\nimport {FaChevronDown, FaTwitter} from \"react-icons/fa\"\r\nimport {FaChevronUp} from \"react-icons/fa\"\r\n\r\nclass ListOfAppointmentsByUser extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            showAppointments: false\r\n        };\r\n        this.toggleAppointmentsHandler = this.toggleAppointmentsHandler.bind(this);\r\n\r\n    }\r\n\r\n    toggleAppointmentsHandler() {\r\n        this.setState({\r\n            showAppointments: !this.state.showAppointments\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sortedAppointments, userID} = this.props;\r\n        const {showAppointments} = this.state;\r\n        let filteredAppByUserID = sortedAppointments.filter((app: IAppointment) => app.userID == userID);\r\n        if (filteredAppByUserID.length === 0) {\r\n            return (\r\n                <div className=\"no-appointment-for-user\"> There is no appointment for selected user!!</div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"list-app-by-user\">\r\n                <button className=\"btn-all-appointment\" onClick={this.toggleAppointmentsHandler}><span>APPOINTMENT BY USER</span>\r\n                    {showAppointments ?\r\n                        <span><FaChevronUp/></span>\r\n                        : <span><FaChevronDown/></span>\r\n                    }\r\n                </button>\r\n                {showAppointments ?\r\n                    <ul>\r\n                        {filteredAppByUserID.map((filteredAppointment: IAppointment, index: number) => {\r\n                            let date = new Date(filteredAppointment.appointment.date);\r\n                            let chosenTime = getChosenTimeByID(filteredAppointment.appointment.timeId);\r\n                            let appointmentDate = date.getDate() + \".\" + (date.getMonth() + 1) + \".\" +\r\n                                date.getFullYear();\r\n                            let appointmentTime = chosenTime.time;\r\n\r\n                            if (filteredAppointment.userID === 0) {\r\n                                return (\r\n                                    <li className=\"appointment-date-time\" key={index}>\r\n                                        <span className=\"index-span\">{index + 1}.  </span>\r\n                                        <span>{appointmentDate}</span>\r\n                                        <span>{appointmentTime}</span>\r\n                                    </li>\r\n                                )\r\n                            } else {\r\n                                return (\r\n                                    <li className=\"appointment-date-time\" key={index}>\r\n                                        <span className=\"index-span\">{index + 1}.  </span>\r\n                                        <span> WEEK {filteredAppointment.weekID}: </span>\r\n                                        <span>{appointmentDate}</span>\r\n                                        <span>{appointmentTime}</span>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        })\r\n                        }\r\n                    </ul>\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ListOfAppointmentsByUser;","import * as React from \"react\";\r\n\r\nclass ChangeWeek extends React.Component<any, any> {\r\n    render() {\r\n        const {weekStartWith, weekID, changeWeek} = this.props;\r\n        return (\r\n                <div className=\"change-week-topbar\">\r\n                    <button className=\"btn-last-week\" data-symbol=\"minus\"\r\n                            data-state-date={weekStartWith} onClick={changeWeek}>\r\n                        Week before\r\n                    </button>\r\n                    <span className=\"week-number\">Week: {weekID}</span>\r\n                    <button className=\"btn-next-week\" data-symbol=\"plus\"\r\n                            data-state-date={weekStartWith} onClick={changeWeek}>\r\n                        Next week\r\n                    </button>\r\n                </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ChangeWeek;","import * as React from \"react\";\r\nimport {getChosenTimeByID} from \"../../../helpers/calendarHelper\";\r\nimport IAppointment from \"../../../interfaces/IAppointment\";\r\nimport {FaChevronDown, FaChevronUp} from \"react-icons/fa\";\r\n\r\nclass ListOfAppointmentsAll extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            showAppointments: false\r\n        };\r\n        this.toggleAppointmentsHandler = this.toggleAppointmentsHandler.bind(this);\r\n\r\n    }\r\n\r\n\r\n    toggleAppointmentsHandler() {\r\n        this.setState({\r\n            showAppointments: !this.state.showAppointments\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sortedAppointments} = this.props;\r\n        const {showAppointments} = this.state;\r\n\r\n        if (sortedAppointments.length === 0) {\r\n            return (\r\n                <span>THERE IS NO APPOINTMENT!!</span>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"list-app-all\">\r\n                <button className=\"btn-all-appointment\" onClick={this.toggleAppointmentsHandler}>\r\n                    <span>ALL APPOINTMENTS</span>\r\n                    {showAppointments ?\r\n                        <span><FaChevronUp/></span>\r\n                        : <span><FaChevronDown/></span>\r\n\r\n                    }</button>\r\n                {showAppointments ?\r\n                    <ol>\r\n                        {\r\n                            sortedAppointments.map((appointment: IAppointment, index: number) => {\r\n                                let date = new Date(appointment.appointment.date);\r\n                                let chosenTime = getChosenTimeByID(appointment.appointment.timeId);\r\n                                let appointmentDate = date.getDate() + \".\" + (date.getMonth() + 1) + \".\" +\r\n                                    date.getFullYear();\r\n                                let appointmentTime = chosenTime.time;\r\n                                return (\r\n                                    <li className=\"appointment-date-time\" key={index}>\r\n                                        <span className=\"index-span\">{index + 1}. </span>\r\n                                        <span> WEEK {appointment.weekID}: </span>\r\n                                        <span>{appointmentDate}</span>\r\n                                        <span>  {appointmentTime}</span>\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ol>\r\n                    : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ListOfAppointmentsAll;","import React, {Component} from \"react\";\r\nimport {\r\n    chooseTime,\r\n    getChosenTimeByID, handleChangeWeek\r\n} from \"../../helpers/calendarHelper\";\r\nimport \"./calendar.scss\";\r\nimport {appointments, checkAvailability, makeAppointment, sortedAppointments} from \"../../helpers/scheduleHelper\";\r\nimport WeekDaysByDate from \"./Components/WeekDaysByDate\";\r\nimport {WeekDaysByName} from \"./Components/WeekDaysByName\";\r\nimport Popup from \"../Popup\";\r\nimport ManageCells from \"./Components/ManageCells\";\r\nimport SelectUser from \"./Components/SelectUser\";\r\nimport ListOfAppointmentsByUser from \"./Components/ListOfAppointmentsByUser\";\r\nimport ChangeWeek from \"./Components/ChangeWeek\";\r\nimport ListOfAppointmentsAll from \"./Components/ListOfAppointmentsAll\";\r\n\r\n\r\nexport class Calendar extends Component<any, any> {\r\n\r\n    selectedTimeID: number = 0;\r\n    selectedDate: string = \"\";\r\n    selectedTime: number = 0;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            weekStartWith: new Date(),\r\n            appointments: appointments,\r\n            weekID: 0,\r\n            userID: 1,\r\n            showPopup: false\r\n        };\r\n        this.changeWeek = this.changeWeek.bind(this);\r\n        this.handleAppointments = this.handleAppointments.bind(this);\r\n        this.selectChange = this.selectChange.bind(this);\r\n        this.togglePopup = this.togglePopup.bind(this);\r\n        this.createAppointment = this.createAppointment.bind(this);\r\n    }\r\n\r\n    changeWeek(event: any) {\r\n        let {weekID, weekStartWith} = this.state;\r\n        let dataSymbol = event.target.getAttribute(\"data-symbol\");\r\n\r\n        let response = handleChangeWeek(dataSymbol, weekStartWith, weekID);\r\n\r\n        if (response.beforeToday) {\r\n            return (\r\n                alert(\"You cannot go in week before that we are today!\")\r\n            )\r\n        } else if (response.afterTwoMonths) {\r\n            return (\r\n                alert(\"You cannot go more than two months from today!\")\r\n            )\r\n        } else {\r\n            this.setState(() => {\r\n                return {\r\n                    weekStartWith: response.newStartDate,\r\n                    weekID: response.weekID\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleAppointments(evenet: any) {\r\n        if (this.state.userID == 0) {\r\n            alert(\"YOU CANNOT CREATE APPOINTMENT FOR THIS USER!\");\r\n            return;\r\n        }\r\n        this.selectedTimeID = evenet.target.getAttribute(\"data-time-row\");\r\n        this.selectedDate = evenet.target.getAttribute(\"data-date-cell\");\r\n        this.selectedTime = getChosenTimeByID(this.selectedTimeID);\r\n        this.togglePopup();\r\n    };\r\n\r\n    selectChange(evenet: any) {\r\n        let userID = evenet.target.value;\r\n        this.setState((state: any) => {\r\n            return {userID: userID}\r\n        });\r\n    };\r\n\r\n    togglePopup() {\r\n        this.setState({\r\n            showPopup: !this.state.showPopup\r\n        });\r\n    }\r\n\r\n    createAppointment() {\r\n        let {weekID, userID} = this.state;\r\n        if (checkAvailability(this.selectedDate, this.selectedTimeID).isAvailable) {\r\n            this.togglePopup();\r\n            makeAppointment(this.selectedDate, this.selectedTime, weekID, userID);\r\n\r\n            this.setState((state: any) => {\r\n                return {appointments: appointments}\r\n            });\r\n        } else return;\r\n    }\r\n\r\n    render() {\r\n        const {weekID, weekStartWith, showPopup, userID} = this.state;\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"calendar\">\r\n                    <table>\r\n                        <thead>\r\n                        <WeekDaysByName/>\r\n                        <WeekDaysByDate\r\n                            weekStartWith={weekStartWith}\r\n                            weekID={weekID}/>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                        <ManageCells\r\n                            chooseTime={chooseTime}\r\n                            weekStartWith={weekStartWith}\r\n                            weekID={weekID}\r\n                            handleAppointments={this.handleAppointments}/>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"info-div\">\r\n                    <ChangeWeek\r\n                        changeWeek={this.changeWeek}\r\n                        weekID={weekID}\r\n                        weekStartWith={weekStartWith}/>\r\n                    <SelectUser\r\n                        selectChange={this.selectChange}\r\n                        userID={userID}/>\r\n                    <div className=\"list-appointment\">\r\n                        <ListOfAppointmentsByUser\r\n                            sortedAppointments={sortedAppointments()}\r\n                            userID={userID}/>\r\n                        <ListOfAppointmentsAll\r\n                            sortedAppointments={sortedAppointments()}\r\n                            userID={userID}/>\r\n                    </div>\r\n                    {showPopup ?\r\n                        <Popup date={this.selectedDate}\r\n                               chosenTime={this.selectedTime}\r\n                               createAppointment={this.createAppointment}\r\n                               cancel={this.togglePopup}/>\r\n                        : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function makePointer(availability: boolean | \"break\" | \"nonworkingHours\" | \"reserved\") {\r\n    if (availability === true) {\r\n        return {cursor: \"pointer\"};\r\n    } else if (availability === \"reserved\") {\r\n        return {cursor: \"no-drop\"};\r\n    } else if (availability === \"break\") {\r\n        return {cursor: \"no-drop\"};\r\n    } else {\r\n        return {cursor: \"default\"};\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport {Calendar} from \"./components/Calendar/calendar\";\n\nfunction App() {\n  return (\n    <Calendar/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}